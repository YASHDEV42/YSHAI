/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * YSHAI API
 * Generated for Orval client
 * OpenAPI spec version: 1.0
 */
import type {
  ModerateImageDto,
  ModerateTextDto,
  ModerateVideoDto,
  ModerationResultResponseDto
} from '.././models';


/**
 * @summary Moderate Arabic text
 */
export type moderationControllerModerateTextResponse200 = {
  data: ModerationResultResponseDto
  status: 200
}
    
export type moderationControllerModerateTextResponseSuccess = (moderationControllerModerateTextResponse200) & {
  headers: Headers;
};
;

export type moderationControllerModerateTextResponse = (moderationControllerModerateTextResponseSuccess)

export const getModerationControllerModerateTextUrl = () => {


  

  return `http://localhost:5000/moderation/text`
}

export const moderationControllerModerateText = async (moderateTextDto: ModerateTextDto, options?: RequestInit): Promise<moderationControllerModerateTextResponse> => {
  
  const res = await fetch(getModerationControllerModerateTextUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      moderateTextDto,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  
  const data: moderationControllerModerateTextResponse['data'] = body ? JSON.parse(body) : {}
  return { data, status: res.status, headers: res.headers } as moderationControllerModerateTextResponse
}


/**
 * @summary Moderate an image by URL
 */
export type moderationControllerModerateImageResponse200 = {
  data: ModerationResultResponseDto
  status: 200
}
    
export type moderationControllerModerateImageResponseSuccess = (moderationControllerModerateImageResponse200) & {
  headers: Headers;
};
;

export type moderationControllerModerateImageResponse = (moderationControllerModerateImageResponseSuccess)

export const getModerationControllerModerateImageUrl = () => {


  

  return `http://localhost:5000/moderation/image`
}

export const moderationControllerModerateImage = async (moderateImageDto: ModerateImageDto, options?: RequestInit): Promise<moderationControllerModerateImageResponse> => {
  
  const res = await fetch(getModerationControllerModerateImageUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      moderateImageDto,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  
  const data: moderationControllerModerateImageResponse['data'] = body ? JSON.parse(body) : {}
  return { data, status: res.status, headers: res.headers } as moderationControllerModerateImageResponse
}


/**
 * @summary Moderate a video by URL
 */
export type moderationControllerModerateVideoResponse200 = {
  data: ModerationResultResponseDto
  status: 200
}
    
export type moderationControllerModerateVideoResponseSuccess = (moderationControllerModerateVideoResponse200) & {
  headers: Headers;
};
;

export type moderationControllerModerateVideoResponse = (moderationControllerModerateVideoResponseSuccess)

export const getModerationControllerModerateVideoUrl = () => {


  

  return `http://localhost:5000/moderation/video`
}

export const moderationControllerModerateVideo = async (moderateVideoDto: ModerateVideoDto, options?: RequestInit): Promise<moderationControllerModerateVideoResponse> => {
  
  const res = await fetch(getModerationControllerModerateVideoUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      moderateVideoDto,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  
  const data: moderationControllerModerateVideoResponse['data'] = body ? JSON.parse(body) : {}
  return { data, status: res.status, headers: res.headers } as moderationControllerModerateVideoResponse
}


/**
 * @summary Fetch moderation reports
 */
export type moderationControllerGetReportsResponse200 = {
  data: ModerationResultResponseDto[]
  status: 200
}
    
export type moderationControllerGetReportsResponseSuccess = (moderationControllerGetReportsResponse200) & {
  headers: Headers;
};
;

export type moderationControllerGetReportsResponse = (moderationControllerGetReportsResponseSuccess)

export const getModerationControllerGetReportsUrl = () => {


  

  return `http://localhost:5000/moderation/reports`
}

export const moderationControllerGetReports = async ( options?: RequestInit): Promise<moderationControllerGetReportsResponse> => {
  
  const res = await fetch(getModerationControllerGetReportsUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  
  const data: moderationControllerGetReportsResponse['data'] = body ? JSON.parse(body) : {}
  return { data, status: res.status, headers: res.headers } as moderationControllerGetReportsResponse
}


