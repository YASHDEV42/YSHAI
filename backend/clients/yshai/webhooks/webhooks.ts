/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * YSHAI API
 * Generated for Orval client
 * OpenAPI spec version: 1.0
 */
import type {
  CreateWebhookDto,
  MessageDto,
  WebhooksControllerDeliveriesParams,
  WebhooksControllerRegister201
} from '.././models';


/**
 * @summary Register webhook
 */
export type webhooksControllerRegisterResponse201 = {
  data: WebhooksControllerRegister201
  status: 201
}
    
export type webhooksControllerRegisterResponseSuccess = (webhooksControllerRegisterResponse201) & {
  headers: Headers;
};
;

export type webhooksControllerRegisterResponse = (webhooksControllerRegisterResponseSuccess)

export const getWebhooksControllerRegisterUrl = () => {


  

  return `http://localhost:5000/webhooks`
}

export const webhooksControllerRegister = async (createWebhookDto: CreateWebhookDto, options?: RequestInit): Promise<webhooksControllerRegisterResponse> => {
  
  const res = await fetch(getWebhooksControllerRegisterUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createWebhookDto,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  
  const data: webhooksControllerRegisterResponse['data'] = body ? JSON.parse(body) : {}
  return { data, status: res.status, headers: res.headers } as webhooksControllerRegisterResponse
}


/**
 * @summary List webhooks
 */
export type webhooksControllerListResponse200 = {
  data: void
  status: 200
}
    
export type webhooksControllerListResponseSuccess = (webhooksControllerListResponse200) & {
  headers: Headers;
};
;

export type webhooksControllerListResponse = (webhooksControllerListResponseSuccess)

export const getWebhooksControllerListUrl = () => {


  

  return `http://localhost:5000/webhooks`
}

export const webhooksControllerList = async ( options?: RequestInit): Promise<webhooksControllerListResponse> => {
  
  const res = await fetch(getWebhooksControllerListUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  
  const data: webhooksControllerListResponse['data'] = body ? JSON.parse(body) : {}
  return { data, status: res.status, headers: res.headers } as webhooksControllerListResponse
}


/**
 * @summary Delete webhook
 */
export type webhooksControllerRemoveResponse200 = {
  data: MessageDto
  status: 200
}
    
export type webhooksControllerRemoveResponseSuccess = (webhooksControllerRemoveResponse200) & {
  headers: Headers;
};
;

export type webhooksControllerRemoveResponse = (webhooksControllerRemoveResponseSuccess)

export const getWebhooksControllerRemoveUrl = (webhookId: number,) => {


  

  return `http://localhost:5000/webhooks/${webhookId}`
}

export const webhooksControllerRemove = async (webhookId: number, options?: RequestInit): Promise<webhooksControllerRemoveResponse> => {
  
  const res = await fetch(getWebhooksControllerRemoveUrl(webhookId),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  
  const data: webhooksControllerRemoveResponse['data'] = body ? JSON.parse(body) : {}
  return { data, status: res.status, headers: res.headers } as webhooksControllerRemoveResponse
}


/**
 * @summary List delivery attempts for a webhook
 */
export type webhooksControllerDeliveriesResponse200 = {
  data: void
  status: 200
}
    
export type webhooksControllerDeliveriesResponseSuccess = (webhooksControllerDeliveriesResponse200) & {
  headers: Headers;
};
;

export type webhooksControllerDeliveriesResponse = (webhooksControllerDeliveriesResponseSuccess)

export const getWebhooksControllerDeliveriesUrl = (webhookId: number,
    params?: WebhooksControllerDeliveriesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:5000/webhooks/${webhookId}/deliveries?${stringifiedParams}` : `http://localhost:5000/webhooks/${webhookId}/deliveries`
}

export const webhooksControllerDeliveries = async (webhookId: number,
    params?: WebhooksControllerDeliveriesParams, options?: RequestInit): Promise<webhooksControllerDeliveriesResponse> => {
  
  const res = await fetch(getWebhooksControllerDeliveriesUrl(webhookId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  
  const data: webhooksControllerDeliveriesResponse['data'] = body ? JSON.parse(body) : {}
  return { data, status: res.status, headers: res.headers } as webhooksControllerDeliveriesResponse
}


