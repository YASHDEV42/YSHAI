/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * YSHAI API
 * Generated for Orval client
 * OpenAPI spec version: 1.0
 */
import type {
  GenerateAltTextDto,
  GenerateAltTextResponseDto,
  GenerateCaptionDto,
  GenerateCaptionResponseDto,
  GenerateHashtagsDto,
  GenerateHashtagsResponseDto
} from '.././models';


/**
 * @summary Generate social media caption
 */
export type aiControllerGenerateCaptionResponse200 = {
  data: GenerateCaptionResponseDto
  status: 200
}
    
export type aiControllerGenerateCaptionResponseSuccess = (aiControllerGenerateCaptionResponse200) & {
  headers: Headers;
};
;

export type aiControllerGenerateCaptionResponse = (aiControllerGenerateCaptionResponseSuccess)

export const getAiControllerGenerateCaptionUrl = () => {


  

  return `http://localhost:5000/ai/caption`
}

export const aiControllerGenerateCaption = async (generateCaptionDto: GenerateCaptionDto, options?: RequestInit): Promise<aiControllerGenerateCaptionResponse> => {
  
  const res = await fetch(getAiControllerGenerateCaptionUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      generateCaptionDto,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  
  const data: aiControllerGenerateCaptionResponse['data'] = body ? JSON.parse(body) : {}
  return { data, status: res.status, headers: res.headers } as aiControllerGenerateCaptionResponse
}


/**
 * @summary Generate hashtags for text
 */
export type aiControllerGenerateHashtagsResponse200 = {
  data: GenerateHashtagsResponseDto
  status: 200
}
    
export type aiControllerGenerateHashtagsResponseSuccess = (aiControllerGenerateHashtagsResponse200) & {
  headers: Headers;
};
;

export type aiControllerGenerateHashtagsResponse = (aiControllerGenerateHashtagsResponseSuccess)

export const getAiControllerGenerateHashtagsUrl = () => {


  

  return `http://localhost:5000/ai/hashtags`
}

export const aiControllerGenerateHashtags = async (generateHashtagsDto: GenerateHashtagsDto, options?: RequestInit): Promise<aiControllerGenerateHashtagsResponse> => {
  
  const res = await fetch(getAiControllerGenerateHashtagsUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      generateHashtagsDto,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  
  const data: aiControllerGenerateHashtagsResponse['data'] = body ? JSON.parse(body) : {}
  return { data, status: res.status, headers: res.headers } as aiControllerGenerateHashtagsResponse
}


/**
 * @summary Generate alternative text for image
 */
export type aiControllerGenerateAltTextResponse200 = {
  data: GenerateAltTextResponseDto
  status: 200
}
    
export type aiControllerGenerateAltTextResponseSuccess = (aiControllerGenerateAltTextResponse200) & {
  headers: Headers;
};
;

export type aiControllerGenerateAltTextResponse = (aiControllerGenerateAltTextResponseSuccess)

export const getAiControllerGenerateAltTextUrl = () => {


  

  return `http://localhost:5000/ai/alt-text`
}

export const aiControllerGenerateAltText = async (generateAltTextDto: GenerateAltTextDto, options?: RequestInit): Promise<aiControllerGenerateAltTextResponse> => {
  
  const res = await fetch(getAiControllerGenerateAltTextUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      generateAltTextDto,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  
  const data: aiControllerGenerateAltTextResponse['data'] = body ? JSON.parse(body) : {}
  return { data, status: res.status, headers: res.headers } as aiControllerGenerateAltTextResponse
}


