/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * YSHAI API
 * Generated for Orval client
 * OpenAPI spec version: 1.0
 */

/**
 * @summary Root
 */
export type metaControllerRootResponse200 = {
  data: void
  status: 200
}
    
export type metaControllerRootResponseSuccess = (metaControllerRootResponse200) & {
  headers: Headers;
};
;

export type metaControllerRootResponse = (metaControllerRootResponseSuccess)

export const getMetaControllerRootUrl = () => {


  

  return `http://localhost:5000/`
}

export const metaControllerRoot = async ( options?: RequestInit): Promise<metaControllerRootResponse> => {
  
  const res = await fetch(getMetaControllerRootUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  
  const data: metaControllerRootResponse['data'] = body ? JSON.parse(body) : {}
  return { data, status: res.status, headers: res.headers } as metaControllerRootResponse
}


/**
 * @summary Health Check
 */
export type metaControllerHealthResponse200 = {
  data: void
  status: 200
}
    
export type metaControllerHealthResponseSuccess = (metaControllerHealthResponse200) & {
  headers: Headers;
};
;

export type metaControllerHealthResponse = (metaControllerHealthResponseSuccess)

export const getMetaControllerHealthUrl = () => {


  

  return `http://localhost:5000/health`
}

export const metaControllerHealth = async ( options?: RequestInit): Promise<metaControllerHealthResponse> => {
  
  const res = await fetch(getMetaControllerHealthUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  
  const data: metaControllerHealthResponse['data'] = body ? JSON.parse(body) : {}
  return { data, status: res.status, headers: res.headers } as metaControllerHealthResponse
}


/**
 * @summary List Timezones
 */
export type metaControllerListTimezonesResponse200 = {
  data: void
  status: 200
}
    
export type metaControllerListTimezonesResponseSuccess = (metaControllerListTimezonesResponse200) & {
  headers: Headers;
};
;

export type metaControllerListTimezonesResponse = (metaControllerListTimezonesResponseSuccess)

export const getMetaControllerListTimezonesUrl = () => {


  

  return `http://localhost:5000/meta/timezones`
}

export const metaControllerListTimezones = async ( options?: RequestInit): Promise<metaControllerListTimezonesResponse> => {
  
  const res = await fetch(getMetaControllerListTimezonesUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  
  const data: metaControllerListTimezonesResponse['data'] = body ? JSON.parse(body) : {}
  return { data, status: res.status, headers: res.headers } as metaControllerListTimezonesResponse
}


/**
 * @summary List Locales
 */
export type metaControllerListLocalesResponse200 = {
  data: void
  status: 200
}
    
export type metaControllerListLocalesResponseSuccess = (metaControllerListLocalesResponse200) & {
  headers: Headers;
};
;

export type metaControllerListLocalesResponse = (metaControllerListLocalesResponseSuccess)

export const getMetaControllerListLocalesUrl = () => {


  

  return `http://localhost:5000/meta/locales`
}

export const metaControllerListLocales = async ( options?: RequestInit): Promise<metaControllerListLocalesResponse> => {
  
  const res = await fetch(getMetaControllerListLocalesUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  
  const data: metaControllerListLocalesResponse['data'] = body ? JSON.parse(body) : {}
  return { data, status: res.status, headers: res.headers } as metaControllerListLocalesResponse
}


