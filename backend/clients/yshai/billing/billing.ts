/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * YSHAI API
 * Generated for Orval client
 * OpenAPI spec version: 1.0
 */
import type {
  BillingControllerCancel200,
  InvoiceResponseDto,
  PlanResponseDto,
  SubscribeDto,
  SubscribeResponseDto
} from '.././models';


/**
 * @summary List available plans
 */
export type billingControllerListPlansResponse200 = {
  data: PlanResponseDto[]
  status: 200
}
    
export type billingControllerListPlansResponseSuccess = (billingControllerListPlansResponse200) & {
  headers: Headers;
};
;

export type billingControllerListPlansResponse = (billingControllerListPlansResponseSuccess)

export const getBillingControllerListPlansUrl = () => {


  

  return `http://localhost:5000/billing/plans`
}

export const billingControllerListPlans = async ( options?: RequestInit): Promise<billingControllerListPlansResponse> => {
  
  const res = await fetch(getBillingControllerListPlansUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  
  const data: billingControllerListPlansResponse['data'] = body ? JSON.parse(body) : {}
  return { data, status: res.status, headers: res.headers } as billingControllerListPlansResponse
}


/**
 * @summary Create or switch subscription
 */
export type billingControllerSubscribeResponse200 = {
  data: SubscribeResponseDto
  status: 200
}
    
export type billingControllerSubscribeResponseSuccess = (billingControllerSubscribeResponse200) & {
  headers: Headers;
};
;

export type billingControllerSubscribeResponse = (billingControllerSubscribeResponseSuccess)

export const getBillingControllerSubscribeUrl = () => {


  

  return `http://localhost:5000/billing/subscribe`
}

export const billingControllerSubscribe = async (subscribeDto: SubscribeDto, options?: RequestInit): Promise<billingControllerSubscribeResponse> => {
  
  const res = await fetch(getBillingControllerSubscribeUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      subscribeDto,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  
  const data: billingControllerSubscribeResponse['data'] = body ? JSON.parse(body) : {}
  return { data, status: res.status, headers: res.headers } as billingControllerSubscribeResponse
}


/**
 * @summary Cancel current subscription
 */
export type billingControllerCancelResponse200 = {
  data: BillingControllerCancel200
  status: 200
}
    
export type billingControllerCancelResponseSuccess = (billingControllerCancelResponse200) & {
  headers: Headers;
};
;

export type billingControllerCancelResponse = (billingControllerCancelResponseSuccess)

export const getBillingControllerCancelUrl = () => {


  

  return `http://localhost:5000/billing/cancel`
}

export const billingControllerCancel = async ( options?: RequestInit): Promise<billingControllerCancelResponse> => {
  
  const res = await fetch(getBillingControllerCancelUrl(),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  
  const data: billingControllerCancelResponse['data'] = body ? JSON.parse(body) : {}
  return { data, status: res.status, headers: res.headers } as billingControllerCancelResponse
}


/**
 * @summary List invoices for current user
 */
export type billingControllerInvoicesResponse200 = {
  data: InvoiceResponseDto[]
  status: 200
}
    
export type billingControllerInvoicesResponseSuccess = (billingControllerInvoicesResponse200) & {
  headers: Headers;
};
;

export type billingControllerInvoicesResponse = (billingControllerInvoicesResponseSuccess)

export const getBillingControllerInvoicesUrl = () => {


  

  return `http://localhost:5000/billing/invoices`
}

export const billingControllerInvoices = async ( options?: RequestInit): Promise<billingControllerInvoicesResponse> => {
  
  const res = await fetch(getBillingControllerInvoicesUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  
  const data: billingControllerInvoicesResponse['data'] = body ? JSON.parse(body) : {}
  return { data, status: res.status, headers: res.headers } as billingControllerInvoicesResponse
}


/**
 * @summary Payment gateway callback
 */
export type billingControllerCallbackResponse201 = {
  data: void
  status: 201
}
    
export type billingControllerCallbackResponseSuccess = (billingControllerCallbackResponse201) & {
  headers: Headers;
};
;

export type billingControllerCallbackResponse = (billingControllerCallbackResponseSuccess)

export const getBillingControllerCallbackUrl = () => {


  

  return `http://localhost:5000/billing/callback`
}

export const billingControllerCallback = async ( options?: RequestInit): Promise<billingControllerCallbackResponse> => {
  
  const res = await fetch(getBillingControllerCallbackUrl(),
  {      
    ...options,
    method: 'POST'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  
  const data: billingControllerCallbackResponse['data'] = body ? JSON.parse(body) : {}
  return { data, status: res.status, headers: res.headers } as billingControllerCallbackResponse
}


