/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * YSHAI API
 * The YSHAI backend API documentation. This API manages posts, teams, media, AI generation, moderation, analytics, billing, and more.
 * OpenAPI spec version: 1.0
 */
import type {
  BillingControllerCancel200,
  InvoiceResponseDto,
  PlanResponseDto,
  SubscribeDto,
  SubscribeResponseDto
} from '.././model';

import { orvalMutator } from '../../lib/orval-mutator';

/**
 * @summary List available plans
 */
export type billingControllerListPlansResponse200 = {
  data: PlanResponseDto[]
  status: 200
}
    
export type billingControllerListPlansResponseSuccess = (billingControllerListPlansResponse200) & {
  headers: Headers;
};
;

export type billingControllerListPlansResponse = (billingControllerListPlansResponseSuccess)

export const getBillingControllerListPlansUrl = () => {


  

  return `/billing/plans`
}

export const billingControllerListPlans = async ( options?: RequestInit): Promise<billingControllerListPlansResponse> => {
  
  return orvalMutator<billingControllerListPlansResponse>(getBillingControllerListPlansUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


/**
 * @summary Create or switch subscription
 */
export type billingControllerSubscribeResponse200 = {
  data: SubscribeResponseDto
  status: 200
}
    
export type billingControllerSubscribeResponseSuccess = (billingControllerSubscribeResponse200) & {
  headers: Headers;
};
;

export type billingControllerSubscribeResponse = (billingControllerSubscribeResponseSuccess)

export const getBillingControllerSubscribeUrl = () => {


  

  return `/billing/subscribe`
}

export const billingControllerSubscribe = async (subscribeDto: SubscribeDto, options?: RequestInit): Promise<billingControllerSubscribeResponse> => {
  
  return orvalMutator<billingControllerSubscribeResponse>(getBillingControllerSubscribeUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      subscribeDto,)
  }
);}


/**
 * @summary Cancel current subscription
 */
export type billingControllerCancelResponse200 = {
  data: BillingControllerCancel200
  status: 200
}
    
export type billingControllerCancelResponseSuccess = (billingControllerCancelResponse200) & {
  headers: Headers;
};
;

export type billingControllerCancelResponse = (billingControllerCancelResponseSuccess)

export const getBillingControllerCancelUrl = () => {


  

  return `/billing/cancel`
}

export const billingControllerCancel = async ( options?: RequestInit): Promise<billingControllerCancelResponse> => {
  
  return orvalMutator<billingControllerCancelResponse>(getBillingControllerCancelUrl(),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}


/**
 * @summary List invoices for current user
 */
export type billingControllerInvoicesResponse200 = {
  data: InvoiceResponseDto[]
  status: 200
}
    
export type billingControllerInvoicesResponseSuccess = (billingControllerInvoicesResponse200) & {
  headers: Headers;
};
;

export type billingControllerInvoicesResponse = (billingControllerInvoicesResponseSuccess)

export const getBillingControllerInvoicesUrl = () => {


  

  return `/billing/invoices`
}

export const billingControllerInvoices = async ( options?: RequestInit): Promise<billingControllerInvoicesResponse> => {
  
  return orvalMutator<billingControllerInvoicesResponse>(getBillingControllerInvoicesUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


/**
 * @summary Payment gateway callback
 */
export type billingControllerCallbackResponse201 = {
  data: void
  status: 201
}
    
export type billingControllerCallbackResponseSuccess = (billingControllerCallbackResponse201) & {
  headers: Headers;
};
;

export type billingControllerCallbackResponse = (billingControllerCallbackResponseSuccess)

export const getBillingControllerCallbackUrl = () => {


  

  return `/billing/callback`
}

export const billingControllerCallback = async ( options?: RequestInit): Promise<billingControllerCallbackResponse> => {
  
  return orvalMutator<billingControllerCallbackResponse>(getBillingControllerCallbackUrl(),
  {      
    ...options,
    method: 'POST'
    
    
  }
);}


