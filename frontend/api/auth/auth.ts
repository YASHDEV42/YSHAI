/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * YSHAI API
 * The YSHAI backend API documentation. This API manages posts, teams, media, AI generation, moderation, analytics, billing, and more.
 * OpenAPI spec version: 1.0
 */
import type {
  AuthControllerVerifyEmailParams,
  ForgotPasswordDto,
  LoginDto,
  MessageResponseDto,
  RefreshTokenDto,
  RegisterDto,
  ResendVerificationDto,
  ResetPasswordDto,
  TokensResponseDto
} from '.././model';

import { orvalMutator } from '../../lib/orval-mutator';

/**
 * @summary Register a new user
 */
export type authControllerRegisterResponse200 = {
  data: MessageResponseDto
  status: 200
}
    
export type authControllerRegisterResponseSuccess = (authControllerRegisterResponse200) & {
  headers: Headers;
};
;

export type authControllerRegisterResponse = (authControllerRegisterResponseSuccess)

export const getAuthControllerRegisterUrl = () => {


  

  return `/auth/register`
}

export const authControllerRegister = async (registerDto: RegisterDto, options?: RequestInit): Promise<authControllerRegisterResponse> => {
  
  return orvalMutator<authControllerRegisterResponse>(getAuthControllerRegisterUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      registerDto,)
  }
);}


/**
 * @summary Login User
 */
export type authControllerLoginResponse200 = {
  data: MessageResponseDto
  status: 200
}
    
export type authControllerLoginResponseSuccess = (authControllerLoginResponse200) & {
  headers: Headers;
};
;

export type authControllerLoginResponse = (authControllerLoginResponseSuccess)

export const getAuthControllerLoginUrl = () => {


  

  return `/auth/login`
}

export const authControllerLogin = async (loginDto: LoginDto, options?: RequestInit): Promise<authControllerLoginResponse> => {
  
  return orvalMutator<authControllerLoginResponse>(getAuthControllerLoginUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      loginDto,)
  }
);}


/**
 * @summary Logout
 */
export type authControllerLogoutResponse200 = {
  data: string
  status: 200
}

export type authControllerLogoutResponse404 = {
  data: string
  status: 404
}
    
export type authControllerLogoutResponseSuccess = (authControllerLogoutResponse200) & {
  headers: Headers;
};
export type authControllerLogoutResponseError = (authControllerLogoutResponse404) & {
  headers: Headers;
};

export type authControllerLogoutResponse = (authControllerLogoutResponseSuccess | authControllerLogoutResponseError)

export const getAuthControllerLogoutUrl = () => {


  

  return `/auth/logout`
}

export const authControllerLogout = async ( options?: RequestInit): Promise<authControllerLogoutResponse> => {
  
  return orvalMutator<authControllerLogoutResponse>(getAuthControllerLogoutUrl(),
  {      
    ...options,
    method: 'POST'
    
    
  }
);}


/**
 * @summary Forgot password
 */
export type authControllerForgotPasswordResponse200 = {
  data: MessageResponseDto
  status: 200
}

export type authControllerForgotPasswordResponse404 = {
  data: MessageResponseDto
  status: 404
}
    
export type authControllerForgotPasswordResponseSuccess = (authControllerForgotPasswordResponse200) & {
  headers: Headers;
};
export type authControllerForgotPasswordResponseError = (authControllerForgotPasswordResponse404) & {
  headers: Headers;
};

export type authControllerForgotPasswordResponse = (authControllerForgotPasswordResponseSuccess | authControllerForgotPasswordResponseError)

export const getAuthControllerForgotPasswordUrl = () => {


  

  return `/auth/forgot-password`
}

export const authControllerForgotPassword = async (forgotPasswordDto: ForgotPasswordDto, options?: RequestInit): Promise<authControllerForgotPasswordResponse> => {
  
  return orvalMutator<authControllerForgotPasswordResponse>(getAuthControllerForgotPasswordUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      forgotPasswordDto,)
  }
);}


/**
 * @summary Reset password
 */
export type authControllerResetPasswordResponse200 = {
  data: MessageResponseDto
  status: 200
}

export type authControllerResetPasswordResponse404 = {
  data: MessageResponseDto
  status: 404
}
    
export type authControllerResetPasswordResponseSuccess = (authControllerResetPasswordResponse200) & {
  headers: Headers;
};
export type authControllerResetPasswordResponseError = (authControllerResetPasswordResponse404) & {
  headers: Headers;
};

export type authControllerResetPasswordResponse = (authControllerResetPasswordResponseSuccess | authControllerResetPasswordResponseError)

export const getAuthControllerResetPasswordUrl = () => {


  

  return `/auth/reset-password`
}

export const authControllerResetPassword = async (resetPasswordDto: ResetPasswordDto, options?: RequestInit): Promise<authControllerResetPasswordResponse> => {
  
  return orvalMutator<authControllerResetPasswordResponse>(getAuthControllerResetPasswordUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      resetPasswordDto,)
  }
);}


/**
 * @summary Verify user email via token
 */
export type authControllerVerifyEmailResponse200 = {
  data: string
  status: 200
}

export type authControllerVerifyEmailResponse404 = {
  data: string
  status: 404
}
    
export type authControllerVerifyEmailResponseSuccess = (authControllerVerifyEmailResponse200) & {
  headers: Headers;
};
export type authControllerVerifyEmailResponseError = (authControllerVerifyEmailResponse404) & {
  headers: Headers;
};

export type authControllerVerifyEmailResponse = (authControllerVerifyEmailResponseSuccess | authControllerVerifyEmailResponseError)

export const getAuthControllerVerifyEmailUrl = (params: AuthControllerVerifyEmailParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/auth/verify?${stringifiedParams}` : `/auth/verify`
}

export const authControllerVerifyEmail = async (params: AuthControllerVerifyEmailParams, options?: RequestInit): Promise<authControllerVerifyEmailResponse> => {
  
  return orvalMutator<authControllerVerifyEmailResponse>(getAuthControllerVerifyEmailUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


/**
 * @summary Resend email verification link
 */
export type authControllerResendVerificationResponse200 = {
  data: MessageResponseDto
  status: 200
}

export type authControllerResendVerificationResponse404 = {
  data: MessageResponseDto
  status: 404
}
    
export type authControllerResendVerificationResponseSuccess = (authControllerResendVerificationResponse200) & {
  headers: Headers;
};
export type authControllerResendVerificationResponseError = (authControllerResendVerificationResponse404) & {
  headers: Headers;
};

export type authControllerResendVerificationResponse = (authControllerResendVerificationResponseSuccess | authControllerResendVerificationResponseError)

export const getAuthControllerResendVerificationUrl = () => {


  

  return `/auth/resend-verification`
}

export const authControllerResendVerification = async (resendVerificationDto: ResendVerificationDto, options?: RequestInit): Promise<authControllerResendVerificationResponse> => {
  
  return orvalMutator<authControllerResendVerificationResponse>(getAuthControllerResendVerificationUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      resendVerificationDto,)
  }
);}


export type authControllerRefreshResponse200 = {
  data: TokensResponseDto
  status: 200
}
    
export type authControllerRefreshResponseSuccess = (authControllerRefreshResponse200) & {
  headers: Headers;
};
;

export type authControllerRefreshResponse = (authControllerRefreshResponseSuccess)

export const getAuthControllerRefreshUrl = () => {


  

  return `/auth/refresh`
}

export const authControllerRefresh = async (refreshTokenDto: RefreshTokenDto, options?: RequestInit): Promise<authControllerRefreshResponse> => {
  
  return orvalMutator<authControllerRefreshResponse>(getAuthControllerRefreshUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      refreshTokenDto,)
  }
);}


