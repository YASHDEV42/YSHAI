/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * YSHAI API
 * The YSHAI backend API documentation. This API manages posts, teams, media, AI generation, moderation, analytics, billing, and more.
 * OpenAPI spec version: 1.0
 */
import type {
  CreateTeamDto,
  InviteMemberDto,
  MessageDto,
  TeamAuditLogResponseDto,
  UpdateMemberRoleDto
} from '.././model';

import teamsControllerCreateMutator from '../../lib/orval-mutator';
import teamsControllerInviteMemberMutator from '../../lib/orval-mutator';
import teamsControllerUpdateMemberRoleMutator from '../../lib/orval-mutator';
import teamsControllerRemoveMemberMutator from '../../lib/orval-mutator';
import teamsControllerApprovePostMutator from '../../lib/orval-mutator';
import teamsControllerRejectPostMutator from '../../lib/orval-mutator';
import teamsControllerListAuditLogsMutator from '../../lib/orval-mutator';

/**
 * @summary Create a new team
 */
export type teamsControllerCreateResponse201 = {
  data: void
  status: 201
}
    
export type teamsControllerCreateResponseSuccess = (teamsControllerCreateResponse201) & {
  headers: Headers;
};
;

export type teamsControllerCreateResponse = (teamsControllerCreateResponseSuccess)

export const getTeamsControllerCreateUrl = () => {


  

  return `/teams`
}

export const teamsControllerCreate = async (createTeamDto: CreateTeamDto, options?: RequestInit): Promise<teamsControllerCreateResponse> => {
  
  return teamsControllerCreateMutator<teamsControllerCreateResponse>(getTeamsControllerCreateUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createTeamDto,)
  }
);}


/**
 * @summary Invite a member to the team
 */
export type teamsControllerInviteMemberResponse200 = {
  data: MessageDto
  status: 200
}
    
export type teamsControllerInviteMemberResponseSuccess = (teamsControllerInviteMemberResponse200) & {
  headers: Headers;
};
;

export type teamsControllerInviteMemberResponse = (teamsControllerInviteMemberResponseSuccess)

export const getTeamsControllerInviteMemberUrl = (teamId: number,) => {


  

  return `/teams/${teamId}/invite`
}

export const teamsControllerInviteMember = async (teamId: number,
    inviteMemberDto: InviteMemberDto, options?: RequestInit): Promise<teamsControllerInviteMemberResponse> => {
  
  return teamsControllerInviteMemberMutator<teamsControllerInviteMemberResponse>(getTeamsControllerInviteMemberUrl(teamId),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      inviteMemberDto,)
  }
);}


/**
 * @summary Update a team member’s role
 */
export type teamsControllerUpdateMemberRoleResponse200 = {
  data: MessageDto
  status: 200
}
    
export type teamsControllerUpdateMemberRoleResponseSuccess = (teamsControllerUpdateMemberRoleResponse200) & {
  headers: Headers;
};
;

export type teamsControllerUpdateMemberRoleResponse = (teamsControllerUpdateMemberRoleResponseSuccess)

export const getTeamsControllerUpdateMemberRoleUrl = (teamId: number,
    memberId: number,) => {


  

  return `/teams/${teamId}/members/${memberId}`
}

export const teamsControllerUpdateMemberRole = async (teamId: number,
    memberId: number,
    updateMemberRoleDto: UpdateMemberRoleDto, options?: RequestInit): Promise<teamsControllerUpdateMemberRoleResponse> => {
  
  return teamsControllerUpdateMemberRoleMutator<teamsControllerUpdateMemberRoleResponse>(getTeamsControllerUpdateMemberRoleUrl(teamId,memberId),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      updateMemberRoleDto,)
  }
);}


/**
 * @summary Remove a member from the team
 */
export type teamsControllerRemoveMemberResponse200 = {
  data: MessageDto
  status: 200
}
    
export type teamsControllerRemoveMemberResponseSuccess = (teamsControllerRemoveMemberResponse200) & {
  headers: Headers;
};
;

export type teamsControllerRemoveMemberResponse = (teamsControllerRemoveMemberResponseSuccess)

export const getTeamsControllerRemoveMemberUrl = (teamId: number,
    memberId: number,) => {


  

  return `/teams/${teamId}/members/${memberId}`
}

export const teamsControllerRemoveMember = async (teamId: number,
    memberId: number, options?: RequestInit): Promise<teamsControllerRemoveMemberResponse> => {
  
  return teamsControllerRemoveMemberMutator<teamsControllerRemoveMemberResponse>(getTeamsControllerRemoveMemberUrl(teamId,memberId),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}


/**
 * @summary Approve a post for publishing
 */
export type teamsControllerApprovePostResponse201 = {
  data: void
  status: 201
}
    
export type teamsControllerApprovePostResponseSuccess = (teamsControllerApprovePostResponse201) & {
  headers: Headers;
};
;

export type teamsControllerApprovePostResponse = (teamsControllerApprovePostResponseSuccess)

export const getTeamsControllerApprovePostUrl = (teamId: number,
    postId: number,) => {


  

  return `/teams/${teamId}/posts/${postId}/approve`
}

export const teamsControllerApprovePost = async (teamId: number,
    postId: number, options?: RequestInit): Promise<teamsControllerApprovePostResponse> => {
  
  return teamsControllerApprovePostMutator<teamsControllerApprovePostResponse>(getTeamsControllerApprovePostUrl(teamId,postId),
  {      
    ...options,
    method: 'POST'
    
    
  }
);}


/**
 * @summary Reject a post
 */
export type teamsControllerRejectPostResponse201 = {
  data: void
  status: 201
}
    
export type teamsControllerRejectPostResponseSuccess = (teamsControllerRejectPostResponse201) & {
  headers: Headers;
};
;

export type teamsControllerRejectPostResponse = (teamsControllerRejectPostResponseSuccess)

export const getTeamsControllerRejectPostUrl = (teamId: number,
    postId: number,) => {


  

  return `/teams/${teamId}/posts/${postId}/reject`
}

export const teamsControllerRejectPost = async (teamId: number,
    postId: number, options?: RequestInit): Promise<teamsControllerRejectPostResponse> => {
  
  return teamsControllerRejectPostMutator<teamsControllerRejectPostResponse>(getTeamsControllerRejectPostUrl(teamId,postId),
  {      
    ...options,
    method: 'POST'
    
    
  }
);}


/**
 * @summary List team audit logs
 */
export type teamsControllerListAuditLogsResponse200 = {
  data: TeamAuditLogResponseDto[]
  status: 200
}
    
export type teamsControllerListAuditLogsResponseSuccess = (teamsControllerListAuditLogsResponse200) & {
  headers: Headers;
};
;

export type teamsControllerListAuditLogsResponse = (teamsControllerListAuditLogsResponseSuccess)

export const getTeamsControllerListAuditLogsUrl = (teamId: number,) => {


  

  return `/teams/${teamId}/audit-logs`
}

export const teamsControllerListAuditLogs = async (teamId: number, options?: RequestInit): Promise<teamsControllerListAuditLogsResponse> => {
  
  return teamsControllerListAuditLogsMutator<teamsControllerListAuditLogsResponse>(getTeamsControllerListAuditLogsUrl(teamId),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


