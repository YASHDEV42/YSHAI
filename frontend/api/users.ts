/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * YSHAI API
 * The YSHAI backend API documentation. This API manages posts, teams, media, AI generation, moderation, analytics, billing, and more.
 * OpenAPI spec version: 1.0
 */
import type {
  UpdatePreferencesDto,
  UpdateUserDto,
  UserResponseDto
} from './model';



/**
 * @summary Get current user using JWT
 */
export type usersControllerGetProfileResponse200 = {
  data: UserResponseDto
  status: 200
}

export type usersControllerGetProfileResponse404 = {
  data: void
  status: 404
}
    
export type usersControllerGetProfileResponseSuccess = (usersControllerGetProfileResponse200) & {
  headers: Headers;
};
export type usersControllerGetProfileResponseError = (usersControllerGetProfileResponse404) & {
  headers: Headers;
};

export type usersControllerGetProfileResponse = (usersControllerGetProfileResponseSuccess | usersControllerGetProfileResponseError)

export const getUsersControllerGetProfileUrl = () => {


  

  return `/users/me`
}

export const usersControllerGetProfile = async ( options?: RequestInit): Promise<usersControllerGetProfileResponse> => {
  
  const res = await fetch(getUsersControllerGetProfileUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  
  const data: usersControllerGetProfileResponse['data'] = body ? JSON.parse(body) : {}
  return { data, status: res.status, headers: res.headers } as usersControllerGetProfileResponse
}


/**
 * @summary Update current user using JWT
 */
export type usersControllerUpdateProfileResponse200 = {
  data: UpdateUserDto
  status: 200
}

export type usersControllerUpdateProfileResponse404 = {
  data: void
  status: 404
}
    
export type usersControllerUpdateProfileResponseSuccess = (usersControllerUpdateProfileResponse200) & {
  headers: Headers;
};
export type usersControllerUpdateProfileResponseError = (usersControllerUpdateProfileResponse404) & {
  headers: Headers;
};

export type usersControllerUpdateProfileResponse = (usersControllerUpdateProfileResponseSuccess | usersControllerUpdateProfileResponseError)

export const getUsersControllerUpdateProfileUrl = () => {


  

  return `/users/me`
}

export const usersControllerUpdateProfile = async (updateUserDto: UpdateUserDto, options?: RequestInit): Promise<usersControllerUpdateProfileResponse> => {
  
  const res = await fetch(getUsersControllerUpdateProfileUrl(),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      updateUserDto,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  
  const data: usersControllerUpdateProfileResponse['data'] = body ? JSON.parse(body) : {}
  return { data, status: res.status, headers: res.headers } as usersControllerUpdateProfileResponse
}


/**
 * @summary Update current user preferences using JWT
 */
export type usersControllerUpdatePreferencesResponse200 = {
  data: void
  status: 200
}
    
export type usersControllerUpdatePreferencesResponseSuccess = (usersControllerUpdatePreferencesResponse200) & {
  headers: Headers;
};
;

export type usersControllerUpdatePreferencesResponse = (usersControllerUpdatePreferencesResponseSuccess)

export const getUsersControllerUpdatePreferencesUrl = () => {


  

  return `/users/me/preferences`
}

export const usersControllerUpdatePreferences = async (updatePreferencesDto: UpdatePreferencesDto, options?: RequestInit): Promise<usersControllerUpdatePreferencesResponse> => {
  
  const res = await fetch(getUsersControllerUpdatePreferencesUrl(),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      updatePreferencesDto,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  
  const data: usersControllerUpdatePreferencesResponse['data'] = body ? JSON.parse(body) : {}
  return { data, status: res.status, headers: res.headers } as usersControllerUpdatePreferencesResponse
}


