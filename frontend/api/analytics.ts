/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * YSHAI API
 * The YSHAI backend API documentation. This API manages posts, teams, media, AI generation, moderation, analytics, billing, and more.
 * OpenAPI spec version: 1.0
 */
import type {
  AccountInsightsDto,
  CampaignInsightsDto,
  PostInsightsDto
} from './model';



/**
 * @summary Post Insights
 */
export type analyticsControllerGetPostInsightsResponse200 = {
  data: PostInsightsDto
  status: 200
}
    
export type analyticsControllerGetPostInsightsResponseSuccess = (analyticsControllerGetPostInsightsResponse200) & {
  headers: Headers;
};
;

export type analyticsControllerGetPostInsightsResponse = (analyticsControllerGetPostInsightsResponseSuccess)

export const getAnalyticsControllerGetPostInsightsUrl = (postId: number,) => {


  

  return `/analytics/posts/${postId}`
}

export const analyticsControllerGetPostInsights = async (postId: number, options?: RequestInit): Promise<analyticsControllerGetPostInsightsResponse> => {
  
  const res = await fetch(getAnalyticsControllerGetPostInsightsUrl(postId),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  
  const data: analyticsControllerGetPostInsightsResponse['data'] = body ? JSON.parse(body) : {}
  return { data, status: res.status, headers: res.headers } as analyticsControllerGetPostInsightsResponse
}


/**
 * @summary Account Insights
 */
export type analyticsControllerGetAccountInsightsResponse200 = {
  data: AccountInsightsDto
  status: 200
}
    
export type analyticsControllerGetAccountInsightsResponseSuccess = (analyticsControllerGetAccountInsightsResponse200) & {
  headers: Headers;
};
;

export type analyticsControllerGetAccountInsightsResponse = (analyticsControllerGetAccountInsightsResponseSuccess)

export const getAnalyticsControllerGetAccountInsightsUrl = (accountId: number,) => {


  

  return `/analytics/accounts/${accountId}`
}

export const analyticsControllerGetAccountInsights = async (accountId: number, options?: RequestInit): Promise<analyticsControllerGetAccountInsightsResponse> => {
  
  const res = await fetch(getAnalyticsControllerGetAccountInsightsUrl(accountId),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  
  const data: analyticsControllerGetAccountInsightsResponse['data'] = body ? JSON.parse(body) : {}
  return { data, status: res.status, headers: res.headers } as analyticsControllerGetAccountInsightsResponse
}


/**
 * @summary Campaign Insights
 */
export type analyticsControllerGetCampaignInsightsResponse200 = {
  data: CampaignInsightsDto
  status: 200
}
    
export type analyticsControllerGetCampaignInsightsResponseSuccess = (analyticsControllerGetCampaignInsightsResponse200) & {
  headers: Headers;
};
;

export type analyticsControllerGetCampaignInsightsResponse = (analyticsControllerGetCampaignInsightsResponseSuccess)

export const getAnalyticsControllerGetCampaignInsightsUrl = (campaignId: number,) => {


  

  return `/analytics/campaigns/${campaignId}`
}

export const analyticsControllerGetCampaignInsights = async (campaignId: number, options?: RequestInit): Promise<analyticsControllerGetCampaignInsightsResponse> => {
  
  const res = await fetch(getAnalyticsControllerGetCampaignInsightsUrl(campaignId),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  
  const data: analyticsControllerGetCampaignInsightsResponse['data'] = body ? JSON.parse(body) : {}
  return { data, status: res.status, headers: res.headers } as analyticsControllerGetCampaignInsightsResponse
}


/**
 * @summary Export report as CSV
 */
export type analyticsControllerExportCsvResponse200 = {
  data: void
  status: 200
}
    
export type analyticsControllerExportCsvResponseSuccess = (analyticsControllerExportCsvResponse200) & {
  headers: Headers;
};
;

export type analyticsControllerExportCsvResponse = (analyticsControllerExportCsvResponseSuccess)

export const getAnalyticsControllerExportCsvUrl = () => {


  

  return `/analytics/export/csv`
}

export const analyticsControllerExportCsv = async ( options?: RequestInit): Promise<analyticsControllerExportCsvResponse> => {
  
  const res = await fetch(getAnalyticsControllerExportCsvUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  
  const data: analyticsControllerExportCsvResponse['data'] = body ? JSON.parse(body) : {}
  return { data, status: res.status, headers: res.headers } as analyticsControllerExportCsvResponse
}


/**
 * @summary Export report as PDF
 */
export type analyticsControllerExportPdfResponse200 = {
  data: void
  status: 200
}
    
export type analyticsControllerExportPdfResponseSuccess = (analyticsControllerExportPdfResponse200) & {
  headers: Headers;
};
;

export type analyticsControllerExportPdfResponse = (analyticsControllerExportPdfResponseSuccess)

export const getAnalyticsControllerExportPdfUrl = () => {


  

  return `/analytics/export/pdf`
}

export const analyticsControllerExportPdf = async ( options?: RequestInit): Promise<analyticsControllerExportPdfResponse> => {
  
  const res = await fetch(getAnalyticsControllerExportPdfUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  
  const data: analyticsControllerExportPdfResponse['data'] = body ? JSON.parse(body) : {}
  return { data, status: res.status, headers: res.headers } as analyticsControllerExportPdfResponse
}


