/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * YSHAI API
 * The YSHAI backend API documentation. This API manages posts, teams, media, AI generation, moderation, analytics, billing, and more.
 * OpenAPI spec version: 1.0
 */
import type {
  ModerateImageDto,
  ModerateTextDto,
  ModerateVideoDto,
  ModerationResultResponseDto
} from '.././model';

import { orvalMutator } from '../../lib/orval-mutator';

/**
 * @summary Moderate Arabic text
 */
export type moderationControllerModerateTextResponse200 = {
  data: ModerationResultResponseDto
  status: 200
}
    
export type moderationControllerModerateTextResponseSuccess = (moderationControllerModerateTextResponse200) & {
  headers: Headers;
};
;

export type moderationControllerModerateTextResponse = (moderationControllerModerateTextResponseSuccess)

export const getModerationControllerModerateTextUrl = () => {


  

  return `/moderation/text`
}

export const moderationControllerModerateText = async (moderateTextDto: ModerateTextDto, options?: RequestInit): Promise<moderationControllerModerateTextResponse> => {
  
  return orvalMutator<moderationControllerModerateTextResponse>(getModerationControllerModerateTextUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      moderateTextDto,)
  }
);}


/**
 * @summary Moderate an image by URL
 */
export type moderationControllerModerateImageResponse200 = {
  data: ModerationResultResponseDto
  status: 200
}
    
export type moderationControllerModerateImageResponseSuccess = (moderationControllerModerateImageResponse200) & {
  headers: Headers;
};
;

export type moderationControllerModerateImageResponse = (moderationControllerModerateImageResponseSuccess)

export const getModerationControllerModerateImageUrl = () => {


  

  return `/moderation/image`
}

export const moderationControllerModerateImage = async (moderateImageDto: ModerateImageDto, options?: RequestInit): Promise<moderationControllerModerateImageResponse> => {
  
  return orvalMutator<moderationControllerModerateImageResponse>(getModerationControllerModerateImageUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      moderateImageDto,)
  }
);}


/**
 * @summary Moderate a video by URL
 */
export type moderationControllerModerateVideoResponse200 = {
  data: ModerationResultResponseDto
  status: 200
}
    
export type moderationControllerModerateVideoResponseSuccess = (moderationControllerModerateVideoResponse200) & {
  headers: Headers;
};
;

export type moderationControllerModerateVideoResponse = (moderationControllerModerateVideoResponseSuccess)

export const getModerationControllerModerateVideoUrl = () => {


  

  return `/moderation/video`
}

export const moderationControllerModerateVideo = async (moderateVideoDto: ModerateVideoDto, options?: RequestInit): Promise<moderationControllerModerateVideoResponse> => {
  
  return orvalMutator<moderationControllerModerateVideoResponse>(getModerationControllerModerateVideoUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      moderateVideoDto,)
  }
);}


/**
 * @summary Fetch moderation reports
 */
export type moderationControllerGetReportsResponse200 = {
  data: ModerationResultResponseDto[]
  status: 200
}
    
export type moderationControllerGetReportsResponseSuccess = (moderationControllerGetReportsResponse200) & {
  headers: Headers;
};
;

export type moderationControllerGetReportsResponse = (moderationControllerGetReportsResponseSuccess)

export const getModerationControllerGetReportsUrl = () => {


  

  return `/moderation/reports`
}

export const moderationControllerGetReports = async ( options?: RequestInit): Promise<moderationControllerGetReportsResponse> => {
  
  return orvalMutator<moderationControllerGetReportsResponse>(getModerationControllerGetReportsUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


