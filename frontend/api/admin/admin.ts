/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * YSHAI API
 * The YSHAI backend API documentation. This API manages posts, teams, media, AI generation, moderation, analytics, billing, and more.
 * OpenAPI spec version: 1.0
 */
import type {
  AdminAuditLogResponseDto,
  AdminControllerAssignRole200,
  AdminControllerBanUser200,
  AdminUserResponseDto,
  AssignRoleDto
} from '.././model';

import adminControllerListUsersMutator from '../../lib/orval-mutator';
import adminControllerBanUserMutator from '../../lib/orval-mutator';
import adminControllerAssignRoleMutator from '../../lib/orval-mutator';
import adminControllerAuditLogsMutator from '../../lib/orval-mutator';

/**
 * @summary List users
 */
export type adminControllerListUsersResponse200 = {
  data: AdminUserResponseDto[]
  status: 200
}
    
export type adminControllerListUsersResponseSuccess = (adminControllerListUsersResponse200) & {
  headers: Headers;
};
;

export type adminControllerListUsersResponse = (adminControllerListUsersResponseSuccess)

export const getAdminControllerListUsersUrl = () => {


  

  return `/admin/users`
}

export const adminControllerListUsers = async ( options?: RequestInit): Promise<adminControllerListUsersResponse> => {
  
  return adminControllerListUsersMutator<adminControllerListUsersResponse>(getAdminControllerListUsersUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


/**
 * @summary Ban user
 */
export type adminControllerBanUserResponse200 = {
  data: AdminControllerBanUser200
  status: 200
}
    
export type adminControllerBanUserResponseSuccess = (adminControllerBanUserResponse200) & {
  headers: Headers;
};
;

export type adminControllerBanUserResponse = (adminControllerBanUserResponseSuccess)

export const getAdminControllerBanUserUrl = (id: number,) => {


  

  return `/admin/users/${id}/ban`
}

export const adminControllerBanUser = async (id: number, options?: RequestInit): Promise<adminControllerBanUserResponse> => {
  
  return adminControllerBanUserMutator<adminControllerBanUserResponse>(getAdminControllerBanUserUrl(id),
  {      
    ...options,
    method: 'POST'
    
    
  }
);}


/**
 * @summary Assign role
 */
export type adminControllerAssignRoleResponse200 = {
  data: AdminControllerAssignRole200
  status: 200
}
    
export type adminControllerAssignRoleResponseSuccess = (adminControllerAssignRoleResponse200) & {
  headers: Headers;
};
;

export type adminControllerAssignRoleResponse = (adminControllerAssignRoleResponseSuccess)

export const getAdminControllerAssignRoleUrl = (id: number,) => {


  

  return `/admin/users/${id}/role`
}

export const adminControllerAssignRole = async (id: number,
    assignRoleDto: AssignRoleDto, options?: RequestInit): Promise<adminControllerAssignRoleResponse> => {
  
  return adminControllerAssignRoleMutator<adminControllerAssignRoleResponse>(getAdminControllerAssignRoleUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      assignRoleDto,)
  }
);}


/**
 * @summary Audit logs
 */
export type adminControllerAuditLogsResponse200 = {
  data: AdminAuditLogResponseDto[]
  status: 200
}
    
export type adminControllerAuditLogsResponseSuccess = (adminControllerAuditLogsResponse200) & {
  headers: Headers;
};
;

export type adminControllerAuditLogsResponse = (adminControllerAuditLogsResponseSuccess)

export const getAdminControllerAuditLogsUrl = () => {


  

  return `/admin/audit-logs`
}

export const adminControllerAuditLogs = async ( options?: RequestInit): Promise<adminControllerAuditLogsResponse> => {
  
  return adminControllerAuditLogsMutator<adminControllerAuditLogsResponse>(getAdminControllerAuditLogsUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


