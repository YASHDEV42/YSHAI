/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * YSHAI API
 * The YSHAI backend API documentation. This API manages posts, teams, media, AI generation, moderation, analytics, billing, and more.
 * OpenAPI spec version: 1.0
 */
import type {
  CountDto,
  MessageDto,
  NotificationResponseDto
} from '.././model';

import { orvalMutator } from '../../lib/orval-mutator';

/**
 * @summary List notifications for current user
 */
export type notificationsControllerListResponse200 = {
  data: NotificationResponseDto[]
  status: 200
}
    
export type notificationsControllerListResponseSuccess = (notificationsControllerListResponse200) & {
  headers: Headers;
};
;

export type notificationsControllerListResponse = (notificationsControllerListResponseSuccess)

export const getNotificationsControllerListUrl = () => {


  

  return `/notifications`
}

export const notificationsControllerList = async ( options?: RequestInit): Promise<notificationsControllerListResponse> => {
  
  return orvalMutator<notificationsControllerListResponse>(getNotificationsControllerListUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


/**
 * @summary Mark notification as read
 */
export type notificationsControllerMarkReadResponse200 = {
  data: MessageDto
  status: 200
}
    
export type notificationsControllerMarkReadResponseSuccess = (notificationsControllerMarkReadResponse200) & {
  headers: Headers;
};
;

export type notificationsControllerMarkReadResponse = (notificationsControllerMarkReadResponseSuccess)

export const getNotificationsControllerMarkReadUrl = (notificationId: number,) => {


  

  return `/notifications/${notificationId}/read`
}

export const notificationsControllerMarkRead = async (notificationId: number, options?: RequestInit): Promise<notificationsControllerMarkReadResponse> => {
  
  return orvalMutator<notificationsControllerMarkReadResponse>(getNotificationsControllerMarkReadUrl(notificationId),
  {      
    ...options,
    method: 'PATCH'
    
    
  }
);}


/**
 * @summary Get unread notifications count
 */
export type notificationsControllerUnreadCountResponse200 = {
  data: CountDto
  status: 200
}
    
export type notificationsControllerUnreadCountResponseSuccess = (notificationsControllerUnreadCountResponse200) & {
  headers: Headers;
};
;

export type notificationsControllerUnreadCountResponse = (notificationsControllerUnreadCountResponseSuccess)

export const getNotificationsControllerUnreadCountUrl = () => {


  

  return `/notifications/unread-count`
}

export const notificationsControllerUnreadCount = async ( options?: RequestInit): Promise<notificationsControllerUnreadCountResponse> => {
  
  return orvalMutator<notificationsControllerUnreadCountResponse>(getNotificationsControllerUnreadCountUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


/**
 * @summary Mark all notifications as read
 */
export type notificationsControllerMarkAllReadResponse200 = {
  data: MessageDto
  status: 200
}
    
export type notificationsControllerMarkAllReadResponseSuccess = (notificationsControllerMarkAllReadResponse200) & {
  headers: Headers;
};
;

export type notificationsControllerMarkAllReadResponse = (notificationsControllerMarkAllReadResponseSuccess)

export const getNotificationsControllerMarkAllReadUrl = () => {


  

  return `/notifications/mark-all-read`
}

export const notificationsControllerMarkAllRead = async ( options?: RequestInit): Promise<notificationsControllerMarkAllReadResponse> => {
  
  return orvalMutator<notificationsControllerMarkAllReadResponse>(getNotificationsControllerMarkAllReadUrl(),
  {      
    ...options,
    method: 'PATCH'
    
    
  }
);}


