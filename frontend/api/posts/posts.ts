/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * YSHAI API
 * The YSHAI backend API documentation. This API manages posts, teams, media, AI generation, moderation, analytics, billing, and more.
 * OpenAPI spec version: 1.0
 */
import type {
  BulkCreatePostsDto,
  CreatePostDto,
  DraftPostDto,
  PostResponseDto,
  PostStatusResponseDto,
  PostsControllerBulkCreateFromCsvBody,
  RecurringPostDto,
  ReschedulePostDto,
  UpdatePostDto
} from '.././model';

import postsControllerCreateMutator from '../../lib/orval-mutator';
import postsControllerBulkCreateMutator from '../../lib/orval-mutator';
import postsControllerBulkCreateFromCsvMutator from '../../lib/orval-mutator';
import postsControllerCreateRecurringMutator from '../../lib/orval-mutator';
import postsControllerCreateDraftMutator from '../../lib/orval-mutator';
import postsControllerUpdateMutator from '../../lib/orval-mutator';
import postsControllerRemoveMutator from '../../lib/orval-mutator';
import postsControllerRescheduleMutator from '../../lib/orval-mutator';
import postsControllerPublishNowMutator from '../../lib/orval-mutator';
import postsControllerStatusGetMutator from '../../lib/orval-mutator';

/**
 * @summary Create a new post
 */
export type postsControllerCreateResponse201 = {
  data: PostResponseDto
  status: 201
}

export type postsControllerCreateResponse404 = {
  data: void
  status: 404
}
    
export type postsControllerCreateResponseSuccess = (postsControllerCreateResponse201) & {
  headers: Headers;
};
export type postsControllerCreateResponseError = (postsControllerCreateResponse404) & {
  headers: Headers;
};

export type postsControllerCreateResponse = (postsControllerCreateResponseSuccess | postsControllerCreateResponseError)

export const getPostsControllerCreateUrl = () => {


  

  return `/posts`
}

export const postsControllerCreate = async (createPostDto: CreatePostDto, options?: RequestInit): Promise<postsControllerCreateResponse> => {
  
  return postsControllerCreateMutator<postsControllerCreateResponse>(getPostsControllerCreateUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createPostDto,)
  }
);}


/**
 * @summary Bulk create posts
 */
export type postsControllerBulkCreateResponse201 = {
  data: PostResponseDto[]
  status: 201
}
    
export type postsControllerBulkCreateResponseSuccess = (postsControllerBulkCreateResponse201) & {
  headers: Headers;
};
;

export type postsControllerBulkCreateResponse = (postsControllerBulkCreateResponseSuccess)

export const getPostsControllerBulkCreateUrl = () => {


  

  return `/posts/bulk`
}

export const postsControllerBulkCreate = async (bulkCreatePostsDto: BulkCreatePostsDto, options?: RequestInit): Promise<postsControllerBulkCreateResponse> => {
  
  return postsControllerBulkCreateMutator<postsControllerBulkCreateResponse>(getPostsControllerBulkCreateUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      bulkCreatePostsDto,)
  }
);}


/**
 * @summary Bulk create posts from CSV upload
 */
export type postsControllerBulkCreateFromCsvResponse201 = {
  data: PostResponseDto[]
  status: 201
}
    
export type postsControllerBulkCreateFromCsvResponseSuccess = (postsControllerBulkCreateFromCsvResponse201) & {
  headers: Headers;
};
;

export type postsControllerBulkCreateFromCsvResponse = (postsControllerBulkCreateFromCsvResponseSuccess)

export const getPostsControllerBulkCreateFromCsvUrl = () => {


  

  return `/posts/bulk/csv`
}

export const postsControllerBulkCreateFromCsv = async (postsControllerBulkCreateFromCsvBody: PostsControllerBulkCreateFromCsvBody, options?: RequestInit): Promise<postsControllerBulkCreateFromCsvResponse> => {
    const formData = new FormData();
formData.append(`file`, postsControllerBulkCreateFromCsvBody.file)

  return postsControllerBulkCreateFromCsvMutator<postsControllerBulkCreateFromCsvResponse>(getPostsControllerBulkCreateFromCsvUrl(),
  {      
    ...options,
    method: 'POST'
    ,
    body: 
      formData,
  }
);}


/**
 * @summary Create a recurring post
 */
export type postsControllerCreateRecurringResponse201 = {
  data: PostResponseDto
  status: 201
}
    
export type postsControllerCreateRecurringResponseSuccess = (postsControllerCreateRecurringResponse201) & {
  headers: Headers;
};
;

export type postsControllerCreateRecurringResponse = (postsControllerCreateRecurringResponseSuccess)

export const getPostsControllerCreateRecurringUrl = () => {


  

  return `/posts/recurring`
}

export const postsControllerCreateRecurring = async (recurringPostDto: RecurringPostDto, options?: RequestInit): Promise<postsControllerCreateRecurringResponse> => {
  
  return postsControllerCreateRecurringMutator<postsControllerCreateRecurringResponse>(getPostsControllerCreateRecurringUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      recurringPostDto,)
  }
);}


/**
 * @summary Create a draft post
 */
export type postsControllerCreateDraftResponse201 = {
  data: PostResponseDto
  status: 201
}
    
export type postsControllerCreateDraftResponseSuccess = (postsControllerCreateDraftResponse201) & {
  headers: Headers;
};
;

export type postsControllerCreateDraftResponse = (postsControllerCreateDraftResponseSuccess)

export const getPostsControllerCreateDraftUrl = () => {


  

  return `/posts/draft`
}

export const postsControllerCreateDraft = async (draftPostDto: DraftPostDto, options?: RequestInit): Promise<postsControllerCreateDraftResponse> => {
  
  return postsControllerCreateDraftMutator<postsControllerCreateDraftResponse>(getPostsControllerCreateDraftUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      draftPostDto,)
  }
);}


/**
 * @summary Update an existing post
 */
export type postsControllerUpdateResponse200 = {
  data: PostResponseDto
  status: 200
}

export type postsControllerUpdateResponse404 = {
  data: void
  status: 404
}
    
export type postsControllerUpdateResponseSuccess = (postsControllerUpdateResponse200) & {
  headers: Headers;
};
export type postsControllerUpdateResponseError = (postsControllerUpdateResponse404) & {
  headers: Headers;
};

export type postsControllerUpdateResponse = (postsControllerUpdateResponseSuccess | postsControllerUpdateResponseError)

export const getPostsControllerUpdateUrl = (id: number,) => {


  

  return `/posts/${id}`
}

export const postsControllerUpdate = async (id: number,
    updatePostDto: UpdatePostDto, options?: RequestInit): Promise<postsControllerUpdateResponse> => {
  
  return postsControllerUpdateMutator<postsControllerUpdateResponse>(getPostsControllerUpdateUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      updatePostDto,)
  }
);}


/**
 * @summary Delete a post (soft delete)
 */
export type postsControllerRemoveResponse200 = {
  data: void
  status: 200
}

export type postsControllerRemoveResponse404 = {
  data: void
  status: 404
}
    
export type postsControllerRemoveResponseSuccess = (postsControllerRemoveResponse200) & {
  headers: Headers;
};
export type postsControllerRemoveResponseError = (postsControllerRemoveResponse404) & {
  headers: Headers;
};

export type postsControllerRemoveResponse = (postsControllerRemoveResponseSuccess | postsControllerRemoveResponseError)

export const getPostsControllerRemoveUrl = (id: number,) => {


  

  return `/posts/${id}`
}

export const postsControllerRemove = async (id: number, options?: RequestInit): Promise<postsControllerRemoveResponse> => {
  
  return postsControllerRemoveMutator<postsControllerRemoveResponse>(getPostsControllerRemoveUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}


/**
 * @summary Reschedule a post
 */
export type postsControllerRescheduleResponse200 = {
  data: PostResponseDto
  status: 200
}
    
export type postsControllerRescheduleResponseSuccess = (postsControllerRescheduleResponse200) & {
  headers: Headers;
};
;

export type postsControllerRescheduleResponse = (postsControllerRescheduleResponseSuccess)

export const getPostsControllerRescheduleUrl = (id: number,) => {


  

  return `/posts/${id}/reschedule`
}

export const postsControllerReschedule = async (id: number,
    reschedulePostDto: ReschedulePostDto, options?: RequestInit): Promise<postsControllerRescheduleResponse> => {
  
  return postsControllerRescheduleMutator<postsControllerRescheduleResponse>(getPostsControllerRescheduleUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      reschedulePostDto,)
  }
);}


/**
 * @summary Publish a post immediately (enqueue job)
 */
export type postsControllerPublishNowResponse200 = {
  data: PostResponseDto
  status: 200
}
    
export type postsControllerPublishNowResponseSuccess = (postsControllerPublishNowResponse200) & {
  headers: Headers;
};
;

export type postsControllerPublishNowResponse = (postsControllerPublishNowResponseSuccess)

export const getPostsControllerPublishNowUrl = (id: number,) => {


  

  return `/posts/${id}/publish`
}

export const postsControllerPublishNow = async (id: number, options?: RequestInit): Promise<postsControllerPublishNowResponse> => {
  
  return postsControllerPublishNowMutator<postsControllerPublishNowResponse>(getPostsControllerPublishNowUrl(id),
  {      
    ...options,
    method: 'POST'
    
    
  }
);}


/**
 * @summary Get post status
 */
export type postsControllerStatusGetResponse200 = {
  data: PostStatusResponseDto
  status: 200
}
    
export type postsControllerStatusGetResponseSuccess = (postsControllerStatusGetResponse200) & {
  headers: Headers;
};
;

export type postsControllerStatusGetResponse = (postsControllerStatusGetResponseSuccess)

export const getPostsControllerStatusGetUrl = (id: number,) => {


  

  return `/posts/${id}/status`
}

export const postsControllerStatusGet = async (id: number, options?: RequestInit): Promise<postsControllerStatusGetResponse> => {
  
  return postsControllerStatusGetMutator<postsControllerStatusGetResponse>(getPostsControllerStatusGetUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


